<?php
namespace codename\core\io\tests;

/**
 * [testImportValidators description]
 */
class testImportValidators extends \PHPUnit\Framework\TestCase {

  /**
   * tests the import validator to validate a valid import config
   */
  public function testImportConfigValidatorWithValidConfig() {
    $validator =  new \codename\core\io\validator\structure\config\import();

    $json = file_get_contents(__DIR__.'/import_example_valid.json');
    $data = json_decode($json, true);

    /* if(json_last_error_msg()) {
      // echo("JSON ERROR: " . json_last_error_msg() . chr(10));
      // echo("SUBSTRING:" . substr($json, 1560, 20));
    }*/

    $errors = $validator->validate($data);

    // expect no errors
    $this->assertTrue(count($errors) == 0);
  }

  /**
   * simulate missing target config
   */
  public function testImportConfigValidatorWithMissingTarget() {
    $validator =  new \codename\core\io\validator\structure\config\import();

    $json = file_get_contents(__DIR__.'/import_example_invalid.json');
    $data = json_decode($json, true);

    /* if(json_last_error_msg()) {
      // echo("JSON ERROR: " . json_last_error_msg() . chr(10));
      // echo("SUBSTRING:" . substr($json, 920, 20));
    }*/
    
    $errors = $validator->validate($data);

    // expect a specific error
    $this->assertEquals('VALIDATION.ARRAY_MISSING_KEY', $errors[0]['__CODE'] );
    $this->assertEquals('target', $errors[0]['__DETAILS']['key'] );
  }

}